int redirectCount = 0, pipeCount = 0, i, fout;

    for (i = 0; args[i] != NULL; i++) {
        switch (*args[i]) {
            case '>':
                if (!i) {
                    // First arg is '>', which is an error
                    return 1;
                }
                if (args[i + 1] == NULL || args[i + 2] != NULL) {
                    // Nothing after redirect or too many things
                    // after redirect, so error
                    return 1;
                }
                redirectCount++;
                break;
            case '|':
                // Increment pipe count if '|' found
                pipeCount++;
                break;
        }
    }

    if (redirectCount > 1) {
        // Too many redirects in single command, so error
        return 1;
    } else if (redirectCount == 1) {
        // Redirect to file instead of stdout


        this is what i should be looking at bc it opens and closes the file 

        fout = creat(args[i - 1], 0777); // Create or truncate file with read/write permissions
        if (fout < 0) {
            perror("creat"); // Print error if creat fails
            return 1;
        }
        // Redirect stdout to the file
        if (dup2(fout, STDOUT_FILENO) < 0) {
            perror("dup2"); // Print error if dup2 fails
            return 1;
        }
        close(fout); 
        args[i - 1] = NULL;
        args[i - 2] = NULL;
    }
    return 0;

    integrate into 

